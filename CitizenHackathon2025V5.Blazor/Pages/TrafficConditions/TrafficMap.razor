@using CitizenHackathon2025V5.Blazor.Client.DTOs
@using CitizenHackathon2025V5.Blazor.Client.Enums
@using CitizenHackathon2025V5.Blazor.Client.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject Blazored.Toast.Services.IToastService ToastService
@implements IAsyncDisposable

@* <button class="btn btn-primary" @onclick="() => ToastService.ShowSuccess(" It works !", "Success" )">
    Test the toast
</button> *@

<div class="page-list">
    <h3>Traffic Conditions Map</h3>
    <div class="filter-buttons">
        <button @onclick="() => FilterLevel = null">Tous</button>
        <button @onclick="() => FilterLevel = (int)TrafficLevel.FreeFlow">Light</button>
        <button @onclick="() => FilterLevel = (int)TrafficLevel.Moderate">Moderate</button>
        <button @onclick="() => FilterLevel = (int)TrafficLevel.Heavy">Severe</button>
        <button @onclick="() => FilterLevel = (int)TrafficLevel.Jammed">Blocked</button>)
    </div>

</div>

<LeafletMapComponent @ref="map" />

@code {
    private HubConnection? hubConnection;
    private LeafletMapComponent map = default!;
    private int? FilterLevel = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/TrafficHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<List<ClientTrafficEventDTO>>("ReceiveTrafficEvents", async events =>
        {
            var filtered = FilterLevel is null
                ? events
                : events.Where(e => e.Level == FilterLevel.Value).ToList();

            await JS.InvokeVoidAsync("mapInterop.updateTrafficMarkers", filtered);
        });

        await hubConnection.StartAsync();
    }
    // If level is an int coming from the DTO :
    private string ColorFor(int level) => ((TrafficLevel)level) switch
    {
        TrafficLevel.FreeFlow => "#4CAF50",
        TrafficLevel.Moderate => "#FFC107",
        TrafficLevel.Heavy => "#FF5722",
        TrafficLevel.Jammed => "#D32F2F",
        _ => "#9E9E9E"
    };

    // … or if you do ifs :
    // if ((TrafficLevel)level == TrafficLevel.FreeFlow) { ... }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}












































































@* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V5.Blazor.Client. All rights reserved. *@




