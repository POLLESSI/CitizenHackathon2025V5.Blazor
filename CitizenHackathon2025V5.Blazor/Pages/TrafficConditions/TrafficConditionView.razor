@page "/trafficconditionview"
@using CitizenHackathon2025V5.Blazor.Client.Models;
@using CitizenHackathon2025.Blazor.DTOs
@using CitizenHackathon2025V5.Blazor.Client.Constants
@using CitizenHackathon2025V5.Blazor.Client.DTOs
@inject IJSRuntime js

<span class="fas fa-certificate me-2"></span> Traffic Conditions

<div class="page-list">
    @* <h3>Traffic Conditions List</h3> *@
    <div class="list-toolbar">
        <div class="left">
            <input class="input-compact" placeholder="Search incident..."
                   @bind="_q" @bind:event="oninput" />
            @if (!string.IsNullOrWhiteSpace(_q))
            {
                <span class="badge badge-info">“@_q”</span>
            }
        </div>

        <div class="right">
            <button class="chip @( _onlyRecent ? "active" : null )" @onclick="() => ToggleRecent()">Recent</button>
        </div>
        <div>
            <NavLink class="chip add-chip" href="/trafficconditioncreate">
                Add
            </NavLink>
        </div>
    </div>
    <div>
        <div class="table-wrapper draggable-container"
                @ref="ScrollContainerRef"
                @onscroll="HandleScroll"
                style="height: 300px; overflow-y: auto; border: 1px solid #444;">
            <table class="table table-striped table-dark styled-table data-list">
                <thead>
                    <tr>
                        <th>#</th>
                        <th class="col-narrow">Incident Type</th>
                        <th class="col-narrow">Message</th>
                        <th class ="col-narrow">CongestionLevel</th>
                        <th class="col-actions"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (!FilterTraffic(visibleTrafficConditions).Any())
                    {
                        <tr><td colspan="99"><div class="empty-state">No incidents available at the moment.</div></td></tr>
                    }
                    else
                    {
                        @foreach (var tr in FilterTraffic(visibleTrafficConditions))
                        {
                            <tr>
                                <td>•</td>
                                <td>@tr.IncidentType</td>
                                <td>@tr.Message</td>
                                <!-- The level must be in a cell -->
                                <td>
                                    <span class="lvl @($"lvl--{tr.CongestionLevel}")">@tr.CongestionLevel</span>
                                </td>

                                <td>
                                    <button class="btn btn-sm traffic-chip @GetTrafficCss(tr.CongestionLevel) btn-glow"
                                            title="See details0"
                                            @onclick="() => ClickInfo(tr.Id)">
                                        Traffic
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        @* <Globe Width="450" Height="450" ShowControls="true" CssClass="mt-2" /> *@
        <div class="earth-container scroll-fade">
            <canvas id="rotatingEarth" width="450" height="450"></canvas>
            <div class="earth-controls">
                <label for="speedRange">Rotation Speed:</label>
                <input type="range" id="speedRange" min="0" max="0.20" step="0.001" value="0.01" />
            </div>
        </div>
    </div>
</div>
            
@if (SelectedId > 0)
{
    <div class="detail-wrapper">
        <div class="list-toolbar">
            <div class="left"><span class="badge badge-info">Details #@SelectedId</span></div>
            <div class="right">
                <button class="chip" @onclick="() => SelectedId = 0">Closed</button>
            </div>
        </div>
        <TrafficConditionDetail Id="@SelectedId" />
    </div>
}
@if (!FilterTraffic(visibleTrafficConditions).Any())
{
    <div class="oz-empty">No items for these filters.</div>
}

@code {
    private static string GetTrafficCss(string? level)
    {
        if (string.IsNullOrWhiteSpace(level)) return "level--low";
        var t = level.Trim().ToLowerInvariant();
        return t switch
        {
            "low" or "1" or "freeflow" => "level--low",
            "medium" or "2" or "moderate" => "level--medium",
            "high" or "3" or "heavy" or "jammed" => "level--high",
            _ => "level--unknown"
        };
    }

    private static string GetTrafficCss(int? level)
    {
        return level switch
        {
            1 => "level--low",
            2 => "level--medium",
            3 => "level--high",
            _ => "level--unknown"
        };
    }
}

