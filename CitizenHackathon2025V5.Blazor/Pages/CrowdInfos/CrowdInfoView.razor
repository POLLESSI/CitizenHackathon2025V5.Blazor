@page "/crowdinfoview"
@using CitizenHackathon2025V5.Blazor.Client.DTOs
@using CitizenHackathon2025V5.Blazor.Client.Utils
@using CitizenHackathon2025V5.Blazor.Client.Enums
@inject IJSRuntime js

<span class="fas fa-certificate me-2"></span> Crowd Infos

<div class="page-list">
    @* <h3>Crowd Infos</h3> *@
    <div class="list-toolbar">
        <div class="left">
            <input class="input-compact" placeholder="Search..."
                   @bind="_q" @bind:event="oninput" />
            @if (!string.IsNullOrWhiteSpace(_q))
            {
                <span class="badge badge-info">“@_q”</span>
            }
        </div>

        <div class="right">
            <button class="chip @( _onlyRecent ? "active" : null )"
                    @onclick="() => ToggleRecent()">
                Recent
            </button>
            
        </div>
        <div>
            <NavLink class="chip add-chip" href="/crowdinfocreate">
                Add
            </NavLink>
        </div>
    </div>

    <div class="table-wrapper draggable-container"
         @ref="ScrollContainerRef"
         @onscroll="HandleScroll"
         style="height:300px; overflow-y:auto; border:1px solid #444;">
        <table class="table table-striped table-dark styled-table data-list">
            <thead>
                <tr>
                    <th class="col-narrow">Location Name</th>
                    <th class="col-narrow">Level</th>
                    <th class="col-actions"></th>
                </tr>
            </thead>
            <tbody>
                @if (!FilterCrowd(visibleCrowdInfos).Any())
                {
                    <tr><td colspan="99"><div class="empty-state">No Crowd Informations Available at the moment.</div></td></tr>
                }
                else
                {
                    @foreach (var co in FilterCrowd(visibleCrowdInfos))
                    {
                        <tr>
                            <td class="text-ellipsis" title="@co.LocationName">@co.LocationName</td>
                            <td>
                                <span class="crowd @($"crowd--{co.CrowdLevel}") oz-tip"
                                      aria-label="@GetCrowdLabel(co.CrowdLevel)">
                                    @co.CrowdLevel
                                </span>
                            </td>
                            <td class="col-actions info-cell">
                                @{
                                    var sev = CrowdInfoSeverityHelpers.GetSeverity(co);
                                    var color = CrowdInfoSeverityHelpers.GetColor(sev);
                                    var desc = CrowdInfoSeverityHelpers.GetDescription(sev);
                                    var isUnknown = color == "#9E9E9E";
                                }
                                <button class="btn btn-sm info-chip @GetLevelCss(co.CrowdLevel) btn-glow"
                                        title="@InfoDesc(co)"
                                        @onclick="() => ClickInfo(co.Id)">
                                    Info
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @* <Globe Width="450" Height="450" ShowControls="true" CssClass="mt-2" /> *@
    <div class="earth-container scroll-fade">
        <canvas id="rotatingEarth" width="450" height="450"></canvas>
        <div class="earth-controls">
            <label for="speedRange">Rotation Speed:</label>
            <input type="range" id="speedRange" min="0" max="0.20" step="0.001" value="0.01" />
        </div>
    </div>

</div>

@if (SelectedId > 0)
{
    <div class="detail-wrapper">
        <div class="list-toolbar">
            <div class="left"><span class="badge badge-info">Détail #@SelectedId</span></div>
            <div class="right">
                <button class="chip" @onclick="() => SelectedId = 0">Fermer</button>
            </div>
        </div>
        <CrowdInfoDetail Id="@SelectedId" />
    </div>
}

@if (!FilterCrowd(visibleCrowdInfos).Any())
{
    <div class="oz-empty">No items for these filters.</div>
}

@code {
    private List<ClientCrowdInfoDTO> allCrowdInfos = new();
    private List<ClientCrowdInfoDTO> visibleCrowdInfos = new();
    private int batchSize = 20;
    private int currentIndex = 0;
    private ElementReference ScrollContainerRef;

    private void LoadMoreItems()
    {
        var nextItems = allCrowdInfos.Skip(currentIndex).Take(batchSize);
        visibleCrowdInfos.AddRange(nextItems);
        currentIndex += batchSize;
    }

    private IEnumerable<ClientCrowdInfoDTO> FilterCrowd(IEnumerable<ClientCrowdInfoDTO> source)
    {
        var q = _q?.Trim();
        var cutoff = DateTime.UtcNow.AddHours(-6);

        return source
            .Where(x =>
                string.IsNullOrEmpty(q) ||
                (x.LocationName ?? "").Contains(q, StringComparison.OrdinalIgnoreCase) ||
                x.Latitude.ToString().Contains(q, StringComparison.OrdinalIgnoreCase) ||
                x.Longitude.ToString().Contains(q, StringComparison.OrdinalIgnoreCase))
            .Where(x => !_onlyRecent || x.Timestamp >= cutoff);
    }

    private async Task HandleScroll()
    {
        var scrollTop = await js.InvokeAsync<int>("getScrollTop", ScrollContainerRef);
        var scrollHeight = await js.InvokeAsync<int>("getScrollHeight", ScrollContainerRef);
        var clientHeight = await js.InvokeAsync<int>("getClientHeight", ScrollContainerRef);

        if (scrollTop + clientHeight >= scrollHeight - 5 && currentIndex < allCrowdInfos.Count)
        {
            LoadMoreItems();
            StateHasChanged();
        }
    }

    private string _q;
    private bool _onlyRecent;
    private void ToggleRecent() => _onlyRecent = !_onlyRecent;

    private static string GetCrowdLabel(int level) => level switch
    {
        0 => "No crowds",
        1 => "Low attendance",
        2 => "Moderate",
        3 => "High",
        4 => "Very high",
        5 => "Saturated",
        _ => "Unknown"
    };
    private static string InfoColor(ClientCrowdInfoDTO co)
        => CrowdInfoSeverityHelpers.GetColor(
               CrowdInfoSeverityHelpers.GetSeverity(co));

    private static string InfoDesc(ClientCrowdInfoDTO co)
        => CrowdInfoSeverityHelpers.GetDescription(
               CrowdInfoSeverityHelpers.GetSeverity(co));
    private static string GetLevelCss(int level)
    {
        var safe = Math.Clamp(level, 0, 5);
        return $"info--lvl{safe}";
    }
    private static string MapToCrowdClass(int level)
    {
        // Example: stretch 0..3 -> 0..5 (Low=1, Medium=2, High=3/4, Critical=5)
        return level switch
        {
            <= 0 => "crowd--1",
            1 => "crowd--2",
            2 => "crowd--3",
            _ => "crowd--5"
        };
    }
}


















































































@* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V5.Blazor.Client. All rights reserved. *@