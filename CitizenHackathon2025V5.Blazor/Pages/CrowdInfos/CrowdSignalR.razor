@page "/crowd-signalr"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>📡 Crowd SignalR Test</h3>

<button @onclick="SendTestUpdate">Envoyer un test serveur</button>

@code {
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("hubs/crowdhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Shared.CrowdInfo.CrowdInfoDTO>("ReceiveCrowdUpdate", async crowd =>
{
    Console.WriteLine($"📥 Update Crowd receiveds: {crowd.LocationName} ({crowd.CrowdLevel})");

    // Parse the strings before moving on to JS
    if (double.TryParse(crowd.Latitude, out var lat) &&
        double.TryParse(crowd.Longitude, out var lng) &&
        int.TryParse(crowd.CrowdLevel, out var level))
    {
        await JS.InvokeVoidAsync("window.OutZenInterop.addOrUpdateCrowdMarker",
            crowd.Id.ToString(),
            lat,
            lng,
            level,
            new { title = crowd.LocationName, description = $"Maj {crowd.Timestamp}" }
        );
    }
    else
    {
        Console.WriteLine("⚠️ Erreur de parsing CrowdInfo");
    }
});

        await _hubConnection.StartAsync();
        Console.WriteLine("✅ Connected hub");
    }

    private async Task SendTestUpdate()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.InvokeAsync("SendCrowdUpdate",
                "sig-1", 50.88, 4.36, 3, "🔥 SignalR Emergency", "Marker generated by the hub");
        }
    }

    record CrowdUpdate(string Id, double Latitude, double Longitude, int Level, string Title, string Description);
}











































































@* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V5.Blazor.Client. All rights reserved. *@