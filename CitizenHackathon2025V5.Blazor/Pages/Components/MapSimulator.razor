@inject IJSRuntime JS

<div class="page-list">
    <div class="map-simulator-panel @(isCollapsed ? "collapsed" : "")">
        <div class="header" @onclick="ToggleCollapse">
            <span>?? Simulateur OutZen</span>
            <span class="toggle-btn">@(!isCollapsed ? "?" : "?")</span>
        </div>
        @if (!isCollapsed)
        {
            <div class="body">
                <label>
                    <input type="checkbox" @bind="AutoSimulationEnabled" />
                    Automatic simulation every 5s
                </label>

                <div class="buttons">
                    <button class="btn btn-sm btn-primary" @onclick="SimulateCrowd">?? Crowd Event </button>
                    <button class="btn btn-sm btn-warning" @onclick="SimulateTraffic">??Traffic Event </button>
                    <button class="btn btn-sm btn-primary" @onclick="SimulateWeatherForecast">?? Event Weather Forecast</button>

                    <button class="btn btn-sm btn-secondary" @onclick="ToggleCollapse">Closed</button>

                </div>

                <p>?? Simulation : <strong>@(AutoSimulationEnabled ? "Enabled" : "Disabled")</strong></p>
            </div>
        }
    </div>
</div>

@code {
    private bool autoSimulationEnabled;

    private bool AutoSimulationEnabled
    {
        get => autoSimulationEnabled;
        set
        {
            if (autoSimulationEnabled != value)
            {
                autoSimulationEnabled = value;
                _ = OnAutoSimulationChanged(value);
            }
        }
    }

    private bool isCollapsed = true;

    private IJSObjectReference? simulatorModule;
    private PeriodicTimer? simulationTimer;
    private CancellationTokenSource? cancellationTokenSource;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            simulatorModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/simulator.control.js");
        }
    }

    private void ToggleCollapse() => isCollapsed = !isCollapsed;

    private async Task SimulateCrowd()
    {
        if (simulatorModule != null)
            await simulatorModule.InvokeVoidAsync("simulateCrowdEvent");
    }

    private async Task SimulateTraffic()
    {
        if (simulatorModule != null)
            await simulatorModule.InvokeVoidAsync("simulateTrafficEvent");
    }

    private async Task SimulateWeatherForecast()
    {
        if (simulatorModule != null)
            await simulatorModule.InvokeVoidAsync("simulateWeatherForecastEvent");
    }

    private async Task OnAutoSimulationChanged(bool enabled)
    {
        if (enabled)
        {
            cancellationTokenSource = new();
            simulationTimer = new(TimeSpan.FromSeconds(5));
            _ = Task.Run(async () =>
            {
                while (await simulationTimer.WaitForNextTickAsync(cancellationTokenSource.Token))
                {
                    await InvokeAsync(SimulateCrowd);
                    await InvokeAsync(SimulateTraffic);
                }
            });
        }
        else
        {
            cancellationTokenSource?.Cancel();
            simulationTimer?.Dispose();
        }
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        simulationTimer?.Dispose();
        simulatorModule?.DisposeAsync();
    }
}












































































@* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V5.Blazor.Client. All rights reserved. *@




