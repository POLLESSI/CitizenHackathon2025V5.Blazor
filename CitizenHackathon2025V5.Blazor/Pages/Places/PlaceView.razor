@page "/placeview"
@using CitizenHackathon2025V5.Blazor.Client.Models;
@using CitizenHackathon2025.Blazor.DTOs
@using CitizenHackathon2025V5.Blazor.Client.Constants
@using CitizenHackathon2025V5.Blazor.Client.DTOs
@inject IJSRuntime js

<span class="fas fa-certificate me-2"></span> Places

<div class="page-list">
    <h3>Place List</h3>
    <div class="list-toolbar">
        <div class="left">
            <input class="input-compact" placeholder="Rechercher..."
                   @bind="_q" @bind:event="oninput" />
            @if (!string.IsNullOrWhiteSpace(_q))
            {
                <span class="badge badge-info">“@_q”</span>
            }
        </div>

        <div class="right">
            <button class="chip @( _onlyRecent ? "active" : null )"@onclick="() => ToggleRecent()">Recent</button>
        </div>
    </div>
        <div class="table-wrapper draggable-container"
                @ref="ScrollContainerRef"
                @onscroll="HandleScroll"
                style="height: 300px; overflow-y: auto; border: 1px solid #444;">
            <table class="table table-striped table-dark styled-table data-list">
                <thead>
                    <tr>
                        <th class ="col-narrow">Name</th>
                        <th class="col-actions"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (!FilterPlace(visiblePlaces).Any())
                    {
                      <tr><td colspan="99"><div class="empty-state">Aucun incident.</div></td></tr>
                    }
                    else
                    {
                    @foreach (var pl in FilterPlace(visiblePlaces))
                        {
                            <tr>
                            <td class="text-ellipsis" title="@pl.Name">@pl.Name</td>
                            <td class="col-actions">
                                <button class="btn btn-sm btn-outline-info" @onclick="() => ClickInfo(pl.Id)">Info</button>
                            </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
</div>
           
@if (SelectedId > 0)
{
  <div class="detail-wrapper">
    <div class="list-toolbar">
      <div class="left"><span class="badge badge-info">Détail #@SelectedId</span></div>
      <div class="right">
        <button class="chip" @onclick="() => SelectedId = 0">Fermer</button>
      </div>
    </div>
        <PlaceDetail Id="@SelectedId" />
  </div>
}

@if (!FilterPlace(visiblePlaces).Any())
{
    <div class="oz-empty">No items for these filters.</div>
}

@code {
    #nullable disable
    private List<PlaceModel> allPlaces = new(); // All elements
    private List<PlaceModel> visiblePlaces = new(); // Those to display
    private int batchSize = 5;
    private int currentIndex = 0;
    private ElementReference ScrollContainerRef;

    protected override void OnInitialized()
    {
        var now = DateTime.UtcNow;
        // Simulates a data source
        for (int i = 1; i <= 50; i++)
            allPlaces.Add(new PlaceModel
            {
                Id = i,
                Name = $"Place {i}",
                Type = "",
                Capacity = "",
                Tag = ""
            });

        LoadMoreItems();
    }

    private void LoadMoreItems()
    {
        var nextItems = allPlaces.Skip(currentIndex).Take(batchSize);
        visiblePlaces.AddRange(nextItems);
        currentIndex += batchSize;
    }

    private async Task HandleScroll()
    {
        var scrollTop = await js.InvokeAsync<int>("getScrollTop", ScrollContainerRef);
        var scrollHeight = await js.InvokeAsync<int>("getScrollHeight", ScrollContainerRef);
        var clientHeight = await js.InvokeAsync<int>("getClientHeight", ScrollContainerRef);

        if (scrollTop + clientHeight >= scrollHeight - 5 && currentIndex < allPlaces.Count)
        {
            LoadMoreItems();
            StateHasChanged();
        }
    }
    private string _q;
    private bool _onlyRecent, _onlyFav;

    private IEnumerable<PlaceModel> FilterPlace(IEnumerable<PlaceModel> source)
    {
        var q = _q?.Trim();
        var cutoff = DateTime.UtcNow.AddHours(-6);

        return source
            .Where(x => string.IsNullOrEmpty(q)
                        || (x.Name ?? "").Contains(q, StringComparison.OrdinalIgnoreCase)
                        || (x.Capacity ?? "").Contains(q, StringComparison.OrdinalIgnoreCase));

    }

    private void ToggleRecent() => _onlyRecent = !_onlyRecent;
}
